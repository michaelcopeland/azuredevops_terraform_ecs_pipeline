# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  subscription: Visual Studio Enterprise(17b12858-3960-4e6f-a663-a06fdae23428)
  resourceGroup: resourcegroup-tfstate
  storageAccount: terraformtfstateskip
  container: tfstate
  tfstateFile: terraform.tfstate
  anyTfChanges: false

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: 'latest'

# - task: TerraformCLI@0
#   displayName: terraform init
#   inputs:
#     command: 'init'
#     backendType: 'azurerm'
#     backendServiceArm: 'Azure subscription 1(460df987-2f72-4f07-a245-a314971fba99)'
#     backendAzureRmResourceGroupName: 'terraform_ecs_pipeline'
#     backendAzureRmStorageAccountName: 'terraformecspipeline_1624689226084'
#     backendAzureRmContainerName: 'containerNamee'
#     allowTelemetryCollection: false
#     backendAzureRmKey: '$(tfstateFile)'

# Works. But isn't what was requested.
# - task: AWSCLI@1
#   inputs:
#     awsCredentials: 'aws_azuredevops_ecs_test'
#     regionName: 'us-east-1'
#     awsCommand: 'ecs'
#     awsSubCommand: 'run-task --task-definition terraform-ecs-pipeline-test --cluster terraform-ecs-pipeline-test --network-configuration "awsvpcConfiguration={subnets=[subnet-64961b3b],securityGroups=[sg-0911b580c7b165bda],assignPublicIp=ENABLED}" --launch-type "FARGATE"'

module "ecs" {
  source  = "terraform-aws-modules/ecs/aws"
  version = "3.2.0"
  # insert the 1 required variable here
}